# Use the eclipse-temurin base image with OpenJDK 23 (Noble version) for building the application
FROM eclipse-temurin:23-noble AS builder

# Set the working directory inside the container to /src
WORKDIR /src

# Copy the Maven wrapper script from the local "movies" directory into the container's working directory
COPY movies/mvnw .

# Copy the pom.xml file (Maven project descriptor) from the local "movies" directory into the container's working directory
COPY movies/pom.xml .

# Copy the Maven configuration directory (.mvn) and its contents into the container’s .mvn directory
COPY movies/.mvn .mvn

# Copy the entire source code from the local "movies/src" directory to the container's "src" directory
COPY movies/src src

# Make the Maven wrapper script executable and run Maven to package the application, skipping tests
RUN chmod a+x mvnw && /src/mvnw package -Dmaven.test.skip=true
# The resulting application JAR file will be at /src/target/movies-0.0.1-SNAPSHOT.jar

# Use a new base image with OpenJRE 23 (Noble version) for the final runtime environment
FROM eclipse-temurin:23-jre-noble

# Set the working directory inside the container to /app
WORKDIR /app

# Copy the JAR file generated by Maven from the builder stage to the runtime image’s /app directory
COPY --from=builder /src/target/movies-0.0.1-SNAPSHOT.jar app.jar

# Copy the Jasper report file (used by the application, likely for generating reports) from the local "data" folder into the container’s "data" folder
COPY data/director_movies_report.jasper data/

# Copy the zip file containing movie data into the container’s "data" folder
COPY data/movies_post_2010.zip data/

# Set environment variable to specify the port on which the application will run
ENV PORT=8080

# Set the environment variables for the database connection to MySQL
ENV SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/movies
ENV SPRING_DATASOURCE_USERNAME=fred
ENV SPRING_DATASOURCE_PASSWORD=fred

# Set the environment variable for MongoDB connection URI
ENV SPRING_DATA_MONGODB_URI=mongodb://localhost:27017/movies

# Expose the port the application will run on (default is 8080 as set above)
EXPOSE ${PORT}

# Change the shell to /bin/sh to allow environment variable substitution and execute the app
SHELL [ "/bin/sh", "-c" ]

# Set the entrypoint for the container, specifying the command to start the application on the given port
ENTRYPOINT SERVER_PORT=${PORT} java -jar app.jar
